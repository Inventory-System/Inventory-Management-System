<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpArch.Domain</name>
    </assembly>
    <members>
        <member name="T:SharpArch.Domain.DomainModel.BaseObject">
            <summary>
                Provides a standard base class for facilitating comparison of objects.
            </summary>
            <remarks>
                For a discussion of the implementation of Equals/GetHashCode, see
                http://devlicio.us/blogs/billy_mccafferty/archive/2007/04/25/using-equals-gethashcode-effectively.aspx
                and http://groups.google.com/group/sharp-architecture/browse_thread/thread/f76d1678e68e3ece?hl=en for
                an in depth and conclusive resolution.
            </remarks>
        </member>
        <member name="F:SharpArch.Domain.DomainModel.BaseObject.HashMultiplier">
            <summary>
                To help ensure hash code uniqueness, a carefully selected random number multiplier
                is used within the calculation. Goodrich and Tamassia's Data Structures and
                Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
                of collissions. See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
                for more information.
            </summary>
        </member>
        <member name="F:SharpArch.Domain.DomainModel.BaseObject.signaturePropertiesCache">
            <summary>
                This static member caches the domain signature properties to avoid looking them up for
                each instance of the same type.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.BaseObject.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.BaseObject.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <remarks>
                This is used to provide the hash code identifier of an object using the signature
                properties of the object; although it's necessary for NHibernate's use, this can
                also be useful for business logic purposes and has been included in this base
                class, accordingly. Since it is recommended that GetHashCode change infrequently,
                if at all, in an object's lifetime, it's important that properties are carefully
                selected which truly represent the signature of an object.
            </remarks>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.BaseObject.GetSignatureProperties">
            <summary>
                Returns the properties of the current object that make up the object's signature.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.BaseObject.HasSameObjectSignatureAs(SharpArch.Domain.DomainModel.BaseObject)">
            <summary>
                Determines whether the current object has the same object signature as the specified object.
            </summary>
            <param name="compareTo">The object to compare to.</param>
            <returns>
                <c>true</c> if the current object has the same object signature as the specified object; otherwise,
                <c>false</c>.
            </returns>
            <remarks>You may override this method to provide your own comparison routine.</remarks>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.BaseObject.GetTypeSpecificSignatureProperties">
            <summary>
                Enforces the template method pattern to have child objects determine which specific
                properties should and should not be included in the object signature comparison.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.BaseObject.GetTypeUnproxied">
            <summary>
                Returns the unproxied type of the current object.
            </summary>
            <remarks>
                <para>
                    When NHibernate proxies objects, it masks the type of the actual entity object.
                    This wrapper burrows into the proxied object to get its actual type.
                </para>
                <para>
                    Although this assumes NHibernate is being used, it doesn't require any NHibernate
                    related dependencies and has no bad side effects if NHibernate isn't being used.
                </para>
                <para>
                    Related discussion is at
                    http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
                </para>
            </remarks>
        </member>
        <member name="T:SharpArch.Domain.DomainModel.BaseObjectEqualityComparer`1">
            <summary>
                Provides a comparer for supporting LINQ methods such as Intersect, Union and Distinct.
            </summary>
            <remarks>
                <para>
                    This may be used for comparing objects of type <see cref="T:SharpArch.Domain.DomainModel.BaseObject"/> and anything 
                    that derives from it, such as <see cref="T:SharpArch.Domain.DomainModel.Entity"/> and <see cref="T:SharpArch.Domain.DomainModel.ValueObject"/>.
                </para>
                <para>
                    NOTE: Microsoft decided that set operators such as Intersect, Union and Distinct should 
                    not use the IEqualityComparer's Equals() method when comparing objects, but should instead 
                    use IEqualityComparer's GetHashCode() method.
                </para>
            </remarks>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.BaseObjectEqualityComparer`1.Equals(`0,`0)">
            <summary>
                Compares the specified objects for equality.
            </summary>
            <param name="firstObject">The first object.</param>
            <param name="secondObject">The second object.</param>
            <returns><c>true</c> if the objects are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.BaseObjectEqualityComparer`1.GetHashCode(`0)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null.</exception>
            <returns>
            A hash code for the object, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:SharpArch.Domain.DomainModel.DomainSignatureAttribute">
            <summary>
                Facilitates indicating which property(s) describe the unique signature of an 
                entity. See Entity.GetTypeSpecificSignatureProperties() for when this is leveraged.
            </summary>
            <remarks>
                This is intended for use with <see cref="T:SharpArch.Domain.DomainModel.Entity" />. It may NOT be used on a <see cref="T:SharpArch.Domain.DomainModel.ValueObject" />.
            </remarks>
        </member>
        <member name="T:SharpArch.Domain.DomainModel.Entity">
            <summary>
                Provides a base class for your objects which will be persisted to the database.
            </summary>
            <remarks>
                Benefits include the addition of an Id property along with a consistent manner for
                comparing entities.
                Since nearly all of the entities you create will have a type of int Id, this 
                base class leverages this assumption. If you want an entity with a type other 
                than int, such as string, then use <see cref="T:SharpArch.Domain.DomainModel.EntityWithTypedId`1" /> instead.
            </remarks>
        </member>
        <member name="T:SharpArch.Domain.DomainModel.EntityWithTypedId`1">
            <summary>
                For a discussion of this object, see 
                http://devlicio.us/blogs/billy_mccafferty/archive/2007/04/25/using-equals-gethashcode-effectively.aspx
            </summary>
        </member>
        <member name="F:SharpArch.Domain.DomainModel.EntityWithTypedId`1.HashMultiplier">
            <summary>
                To help ensure hash code uniqueness, a carefully selected random number multiplier 
                is used within the calculation.  Goodrich and Tamassia's Data Structures and
                Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
                of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
                for more information.
            </summary>
        </member>
        <member name="P:SharpArch.Domain.DomainModel.EntityWithTypedId`1.Id">
            <summary>
                Gets or sets the ID.
            </summary>
            <remarks>
                <para>
                    The ID may be of type <c>string</c>, <c>int</c>, a custom type, etc.
                    The setter is protected to allow unit tests to set this property via reflection
                    and to allow domain objects more flexibility in setting this for those objects
                    with assigned IDs. It's virtual to allow NHibernate-backed objects to be lazily
                    loaded. This is ignored for XML serialization because it does not have a public
                    setter (which is very much by design). See the FAQ within the documentation if
                    you'd like to have the ID XML serialized.
                </para>
            </remarks>        
        </member>
        <member name="M:SharpArch.Domain.DomainModel.EntityWithTypedId`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.EntityWithTypedId`1.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <remarks>
                This is used to provide the hash code identifier of an object using the signature
                properties of the object; although it's necessary for NHibernate's use, this can
                also be useful for business logic purposes and has been included in this base
                class, accordingly. Since it is recommended that GetHashCode change infrequently,
                if at all, in an object's lifetime, it's important that properties are carefully
                selected which truly represent the signature of an object.
            </remarks>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.EntityWithTypedId`1.IsTransient">
            <summary>
                Returns a value indicating whether the current object is transient.
            </summary>
            <remarks>
                Transient objects are not associated with an item already in storage. For instance,
                a Customer is transient if its ID is 0.  It's virtual to allow NHibernate-backed 
                objects to be lazily loaded.
            </remarks>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.EntityWithTypedId`1.GetTypeSpecificSignatureProperties">
            <summary>
                Returns the signature properties that are specific to the type of the current object.
            </summary>
            <remarks>
                If you choose NOT to override this method (which will be the most common scenario), 
                then you should decorate the appropriate property(s) with the <see cref="T:SharpArch.Domain.DomainModel.DomainSignatureAttribute"/>
                attribute and they will be compared automatically. This is the preferred method of
                managing the domain signature of entity objects. This ensures that the entity has at
                least one property decorated with the <see cref="T:SharpArch.Domain.DomainModel.DomainSignatureAttribute"/> attribute.
            </remarks>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.EntityWithTypedId`1.HasSameNonDefaultIdAs(SharpArch.Domain.DomainModel.EntityWithTypedId{`0})">
            <summary>
                Returns a value indicating whether the current entity and the provided entity have
                the same ID values and the IDs are not of the default ID value.
            </summary>
            <returns><c>true</c> if the current entity and the provided entity have the same ID values and the IDs are not of the default ID value; otherwise; <c>false</c>.</returns>
        </member>
        <member name="T:SharpArch.Domain.DomainModel.IEntityWithTypedId`1">
            <summary>
                This serves as a base interface for <see cref="T:SharpArch.Domain.DomainModel.EntityWithTypedId`1" /> and 
                <see cref="T:SharpArch.Domain.DomainModel.Entity" />. It also provides a simple means to develop your own base entity.
            </summary>
        </member>
        <member name="P:SharpArch.Domain.DomainModel.IEntityWithTypedId`1.Id">
            <summary>
                Gets the ID which uniquely identifies the entity instance within its type's bounds.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.IEntityWithTypedId`1.GetSignatureProperties">
            <summary>
                Returns the properties of the current object that make up the object's signature.
            </summary>
            <returns>A collection of <see cref="T:System.Reflection.PropertyInfo"/> instances.</returns>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.IEntityWithTypedId`1.IsTransient">
            <summary>
                Returns a value indicating whether the current object is transient.
            </summary>
            <remarks>
                Transient objects are not associated with an item already in storage. For instance,
                a Customer is transient if its ID is 0.  It's virtual to allow NHibernate-backed 
                objects to be lazily loaded.
            </remarks>
        </member>
        <member name="T:SharpArch.Domain.DomainModel.IHasAssignedId`1">
            <summary>
                Defines the public members of a class that supports setting an assigned ID of an object.
            </summary>
            <typeparam name="TId">The type of the ID.</typeparam>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.IHasAssignedId`1.SetAssignedIdTo(`0)">
            <summary>
                Sets the assigned ID of an object.
            </summary>
            <remarks>
                This is not part of <see cref="T:SharpArch.Domain.DomainModel.Entity" /> since most entities do not have assigned
                IDs and since business rules will certainly vary as to what constitutes a valid,
                assigned ID for one object but not for another.
            </remarks>
        </member>
        <member name="T:SharpArch.Domain.DomainModel.ValidatableObject">
            <summary>
                Serves as the base class for objects that are validatable.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.ValidatableObject.IsValid(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Determines whether this instance is valid.
            </summary>
            <returns><c>true</c> if this instance is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.ValidatableObject.ValidationResults(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Validates all properties of the object and returns the validation results if any of
                them were deemed invalid.
            </summary>
            <returns>A collection of validation results.</returns>
        </member>
        <member name="T:SharpArch.Domain.DomainModel.ValueObject">
            <summary>
                Provides a standard base class for facilitating comparison of value objects using all the object's properties.
            </summary>
            <remarks>
                For a discussion of the implementation of Equals/GetHashCode, see 
                http://devlicio.us/blogs/billy_mccafferty/archive/2007/04/25/using-equals-gethashcode-effectively.aspx
                and http://groups.google.com/group/sharp-architecture/browse_thread/thread/f76d1678e68e3ece?hl=en for 
                an in depth and conclusive resolution.
            </remarks>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.ValueObject.op_Equality(SharpArch.Domain.DomainModel.ValueObject,SharpArch.Domain.DomainModel.ValueObject)">
            <summary>
                Implements the <c>==</c> operator.
            </summary>
            <param name="valueObject1">The first value object.</param>
            <param name="valueObject2">The second value object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.ValueObject.op_Inequality(SharpArch.Domain.DomainModel.ValueObject,SharpArch.Domain.DomainModel.ValueObject)">
            <summary>
                Implements the <c>!=</c> operator.
            </summary>
            <param name="valueObject1">The first value object.</param>
            <param name="valueObject2">The second value object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.ValueObject.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.ValueObject.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <remarks>
                This is used to provide the hash code identifier of an object using the signature
                properties of the object; although it's necessary for NHibernate's use, this can
                also be useful for business logic purposes and has been included in this base
                class, accordingly. Since it is recommended that GetHashCode change infrequently,
                if at all, in an object's lifetime, it's important that properties are carefully
                selected which truly represent the signature of an object.
            </remarks>
        </member>
        <member name="M:SharpArch.Domain.DomainModel.ValueObject.GetTypeSpecificSignatureProperties">
            <summary>
                Returns the signature properties that are specific to the type of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">ValueObject has properties marked with <see cref="T:SharpArch.Domain.DomainModel.DomainSignatureAttribute"/></exception>
        </member>
        <member name="T:SharpArch.Domain.FileCache">
            <summary>
                Provides file cache helper methods.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.FileCache.RetrieveFromCache``1(System.String)">
            <summary>
                Deserializes a data file into an object of type {T}.
            </summary>
            <typeparam name="T">Type of object to deseralize and return.</typeparam>
            <param name="path">Full path to file containing seralized data.</param>
            <returns>If object is successfully deseralized, the object of type {T}, otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the path parameter is null or empty.</exception>
        </member>
        <member name="M:SharpArch.Domain.FileCache.StoreInCache``1(``0,System.String)">
            <summary>
                Serializes the given object of type {T} to a file at the given path.
            </summary>
            <typeparam name="T">Type of object to serialize.</typeparam>
            <param name="obj">Object to serialize and store in a file.</param>
            <param name="path">Full path of file to store the serialized data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if obj or path parameters are null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.
            -or- This operation is not supported on the current platform.
            -or- <paramref name="path" /> specified a directory.
            -or- The caller does not have the required permission. 
            -or specified file is a hidden file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
                An error has occurred during serialization, such as if an object in the <paramref name="obj" /> parameter is not marked as serializable. 
            </exception>
        </member>
        <member name="M:SharpArch.Domain.FileCache.Save``1(System.IO.Stream,``0)">
            <summary>
            Saves object to stream in BinaryFormat.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
                An error has occurred during serialization, such as if an object in the <paramref name="obj" /> parameter is not marked as serializable. 
            </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:SharpArch.Domain.FileCache.Load``1(System.IO.Stream)">
            <summary>
            Load object from the stream.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>        
            <param name="stream">The stream.</param>
            <returns></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The <paramref name="stream" /> supports seeking, but its length is 0. 
            -or-The target type is a <see cref="T:System.Decimal" />, but the value is out of range of the <see cref="T:System.Decimal" /> type.
            </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:SharpArch.Domain.PersistenceSupport.ITransactionManager">
            <summary>
                Defines the public members of a class that represents a database context which handles
                application wide DB activities such as committing any pending changes, beginning a
                transaction, rolling back a transaction, etc.
            </summary>
            <remarks>
                Note that outside of <see cref="T:IDbContext.CommitChanges"/>, you shouldn't have to
                invoke this object very often. If you're using on of the the <c>TransactionAttribute</c>
                atrributes provided by SharpArch on your controller actions, then the transaction
                opening/committing will be taken care of for you.
            </remarks>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.ITransactionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
                Begins the transaction.
            </summary>
            <param name="isolationLevel">Transaction isolation level, see <see cref="T:System.Data.IsolationLevel"/> for details. </param>
            <returns>The transaction instance.</returns>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.ITransactionManager.CommitTransaction">
            <summary>
                Commits the transaction, saving all changes.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.ITransactionManager.RollbackTransaction">
            <summary>
                Rolls the transaction back, discarding any changes.
            </summary>
        </member>
        <member name="T:SharpArch.Domain.PersistenceSupport.ILinqRepository`1">
            <summary>
                Defines the public members of a LINQ supported repository.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
        </member>
        <member name="T:SharpArch.Domain.PersistenceSupport.ILinqRepositoryWithTypedId`2">
            <summary>
                Defines the public members of a LINQ supported repository.
            </summary>
            <remarks>
                Defines a LINQ implementation of the Repository Pattern that takes in a Specification to
                define the items that should be returned.
            </remarks>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.ILinqRepositoryWithTypedId`2.FindOne(`1)">
            <summary>
                Finds an item by ID.
            </summary>
            <param name="id">The ID of the entity.</param>
            <returns>The matching item.</returns>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.ILinqRepositoryWithTypedId`2.FindOne(SharpArch.Domain.Specifications.ILinqSpecification{`0})">
            <summary>
                Finds an item by a specification.
            </summary>
            <param name="specification">The specification.</param>
            <returns>The matching item.</returns>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.ILinqRepositoryWithTypedId`2.FindAll">
            <summary>
                Finds all items within the repository.
            </summary>
            <returns>All items in the repository.</returns>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.ILinqRepositoryWithTypedId`2.FindAll(SharpArch.Domain.Specifications.ILinqSpecification{`0})">
            <summary>
                Finds all items by a specification.
            </summary>
            <param name="specification">The specification.</param>
            <returns>All matching items.</returns>
        </member>
        <member name="T:SharpArch.Domain.PersistenceSupport.IRepository`1">
            <summary>
                Provides a standard interface for DAOs which are data-access mechanism agnostic.
            </summary>
            <remarks>
                Since nearly all of the domain objects you create will have a type of int ID, this 
                base DAO leverages this assumption. If you want an entity with a type 
                other than int, such as string, then use <see cref="T:SharpArch.Domain.PersistenceSupport.IRepositoryWithTypedId`2" />.
            </remarks>
        </member>
        <member name="T:SharpArch.Domain.PersistenceSupport.IEntityDuplicateChecker">
            <summary>
                Defines the public members of a class that checks an entity for duplicates.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.IEntityDuplicateChecker.DoesDuplicateExistWithTypedIdOf``1(SharpArch.Domain.DomainModel.IEntityWithTypedId{``0})">
            <summary>Returns a value indicating whether a duplicate of the specified <paramref name="entity"/> exists.</summary>
            <typeparam name="TId">The type of the ID that identifies the entity.</typeparam>
            <param name="entity">The entity.</param>
            <exception cref="T:System.ArgumentNullException"><see paramref="entity" /> is null.</exception>
            <returns>
            <c>true</c> if a duplicate exists, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:SharpArch.Domain.PersistenceSupport.IRepositoryWithTypedId`2">
            <summary>
                Defines the public members of a class that implements the repository pattern for entities
                of the specified type.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <typeparam name="TId">The type of the entity ID.</typeparam>
        </member>
        <member name="P:SharpArch.Domain.PersistenceSupport.IRepositoryWithTypedId`2.TransactionManager">
            <summary>
                Returns the database context, which provides a handle to application wide DB
                activities such as committing any pending changes, beginning a transaction,
                rolling back a transaction, etc.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.IRepositoryWithTypedId`2.Get(`1)">
            <summary>
                Returns the entity that matches the specified ID.
            </summary>
            <remarks>
                An entity or <c>null</c> if a row is not found matching the provided ID.
            </remarks>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.IRepositoryWithTypedId`2.GetAll">
            <summary>
                Returns all of the items of a given type.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.IRepositoryWithTypedId`2.Save(`0)">
            <summary>
            For entities that have assigned Id's, you must explicitly call Save to add a new one.
            See http://www.hibernate.org/hib_docs/nhibernate/html_single/#mapping-declaration-id-assigned.
            </summary>
            <returns>
            Saved entity instance.
            </returns>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.IRepositoryWithTypedId`2.SaveOrUpdate(`0)">
            <summary>
                Saves or updates the specified entity.
            </summary>
            <remarks>
                <para>
                    For entities with automatically generated IDs, such as identity,
                    <see cref="M:SharpArch.Domain.PersistenceSupport.IRepositoryWithTypedId`2.SaveOrUpdate(`0)"/>  may be called when saving or updating an entity.
                </para>
                <para>
                    Updating also allows you to commit changes to a detached object.
                    More info may be found at:
                    http://www.hibernate.org/hib_docs/nhibernate/html_single/#manipulatingdata-updating-detached
                </para>
            </remarks>
            <returns>
            Entity instance.
            </returns>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.IRepositoryWithTypedId`2.Evict(`0)">
            <summary>
            Dissasociates the entity with the ORM so that changes made to it are not automatically 
            saved to the database.
            </summary>
            <remarks>
            In NHibernate this removes the entity from current session cache.
            More details may be found at http://www.hibernate.org/hib_docs/nhibernate/html_single/#performance-sessioncache.
            </remarks>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.IRepositoryWithTypedId`2.Delete(`0)">
            <summary>
                Deletes the specified entity.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.IRepositoryWithTypedId`2.Delete(`1)">
            <summary>
                Deletes the entity that matches the provided ID.
            </summary>
        </member>
        <member name="T:SharpArch.Domain.PersistenceSupport.RepositoryExtensions">
            <summary>
                Repository extension methods.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.PersistenceSupport.RepositoryExtensions.SaveAndEvict``2(SharpArch.Domain.PersistenceSupport.IRepositoryWithTypedId{``0,``1},``0)">
            <summary>
                Saves the specified object to the repository and evicts it from the session.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="repository" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:SharpArch.Domain.Enums">
            <summary>
                Contains global enumerations.
            </summary>
        </member>
        <member name="T:SharpArch.Domain.Enums.LockMode">
            <summary>
                Provides an NHibernate.LockMode facade so as to avoid a direct dependency on the NHibernate DLL.
            </summary>
            <remarks>Further information concerning lock modes may be found at:
            http://docs.jboss.org/hibernate/orm/4.1/manual/en-US/html/ch13.html#transactions-locking</remarks>
        </member>
        <member name="F:SharpArch.Domain.Enums.LockMode.None">
            <summary>
                Represents the absence of a lock. All objects switch to this lock mode at the
                end of a Transaction. Objects associated with the session via a call to
                update() or saveOrUpdate() also start out in this lock mode.
            </summary>
        </member>
        <member name="F:SharpArch.Domain.Enums.LockMode.Read">
            <summary>
                This lock mode is acquired automatically when data is read under Repeatable Read
                or Serializable isolation level. It can be re-acquired by explicit user request.
            </summary>
        </member>
        <member name="F:SharpArch.Domain.Enums.LockMode.Upgrade">
            <summary>
                This lock mode can be acquired upon explicit user request using
                <c>SELECT ... FOR UPDATE</c> on databases which support that syntax.
            </summary>
        </member>
        <member name="F:SharpArch.Domain.Enums.LockMode.UpgradeNoWait">
            <summary>
                This lock mode can be acquired upon explicit user request using a
                <c>SELECT ... FOR UPDATE NOWAIT</c> under Oracle.
            </summary>
        </member>
        <member name="F:SharpArch.Domain.Enums.LockMode.Write">
            <summary>
                This lock mode is acquired automatically when a row is updated or inserted.
            </summary>
        </member>
        <member name="T:SharpArch.Domain.Reflection.ITypePropertyDescriptorCache">
            <summary>
                Property descriptors cache.
            </summary>
            <remarks>Implementation is thread-safe.
            </remarks>
        </member>
        <member name="M:SharpArch.Domain.Reflection.ITypePropertyDescriptorCache.Find(System.Type)">
            <summary>
            Find cached property descriptor.
            </summary>
            <param name="type">The type.</param>
            <returns><see cref="T:SharpArch.Domain.Reflection.TypePropertyDescriptor"/> or <c>null</c> if does not exists.</returns>
        </member>
        <member name="M:SharpArch.Domain.Reflection.ITypePropertyDescriptorCache.GetOrAdd(System.Type,System.Func{System.Type,SharpArch.Domain.Reflection.TypePropertyDescriptor})">
            <summary>
            Get existing property descriptor or create and cache it.
            </summary>
            <param name="type">The type.</param>
            <param name="factory">The factory to create descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:SharpArch.Domain.Reflection.ITypePropertyDescriptorCache.Clear">
            <summary>
                Clears the cache.
            </summary>
        </member>
        <member name="P:SharpArch.Domain.Reflection.ITypePropertyDescriptorCache.Count">
            <summary>
            Returns number of entries in the cache.
            </summary>
        </member>
        <member name="T:SharpArch.Domain.Reflection.TypePropertyDescriptor">
            <summary>
                Contains injectable properties per type.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.Reflection.TypePropertyDescriptor.#ctor(System.Type,System.Reflection.PropertyInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpArch.Domain.Reflection.TypePropertyDescriptor" /> class.
            </summary>
            <param name="ownerType">Type of the object.</param>
            <param name="properties">The injectable properties.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:SharpArch.Domain.Reflection.TypePropertyDescriptor.OwnerType">
            <summary>
                Owner type. 
            </summary>
        </member>
        <member name="P:SharpArch.Domain.Reflection.TypePropertyDescriptor.Properties">
            <summary>
                Gets the injectable properties.
            </summary>
            <value>
                The injectable properties.
            </value>
        </member>
        <member name="M:SharpArch.Domain.Reflection.TypePropertyDescriptor.HasProperties">
            <summary>
                Gets a value indicating whether <see cref="P:SharpArch.Domain.Reflection.TypePropertyDescriptor.OwnerType" /> has injectable properties.
            </summary>
            <value>
                <c>true</c> if this instance has injectable properties; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SharpArch.Domain.Reflection.TypePropertyDescriptor.Equals(SharpArch.Domain.Reflection.TypePropertyDescriptor)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SharpArch.Domain.Reflection.TypePropertyDescriptor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpArch.Domain.Reflection.TypePropertyDescriptor.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpArch.Domain.Reflection.TypePropertyDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:SharpArch.Domain.Reflection.TypePropertyDescriptorCache">
            <summary>
                Property descriptors cache.
            </summary>
            <remarks>Implementation is thread-safe.</remarks>
        </member>
        <member name="M:SharpArch.Domain.Reflection.TypePropertyDescriptorCache.Find(System.Type)">
            <summary>
                Find cached property descriptor.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <see cref="T:SharpArch.Domain.Reflection.TypePropertyDescriptor" /> or <c>null</c> if does not exists.
            </returns>
        </member>
        <member name="M:SharpArch.Domain.Reflection.TypePropertyDescriptorCache.GetOrAdd(System.Type,System.Func{System.Type,SharpArch.Domain.Reflection.TypePropertyDescriptor})">
            <summary>
                Get existing property descriptor or create and cache it.
            </summary>
            <param name="type">The type.</param>
            <param name="factory">The factory to create descriptor.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> or <paramref name="factory"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:SharpArch.Domain.Reflection.TypePropertyDescriptorCache.Clear">
            <summary>
                Clears the cache.
            </summary>
        </member>
        <member name="P:SharpArch.Domain.Reflection.TypePropertyDescriptorCache.Count">
            <summary>
                Returns number of entries in the cache.
            </summary>
        </member>
        <member name="T:SharpArch.Domain.Specifications.AdHoc`1">
            <summary>
                An ad hoc query specification.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
        </member>
        <member name="M:SharpArch.Domain.Specifications.AdHoc`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpArch.Domain.Specifications.AdHoc`1" /> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:SharpArch.Domain.Specifications.AdHoc`1.MatchingCriteria">
            <summary>
                Gets the matching criteria.
            </summary>
        </member>
        <member name="T:SharpArch.Domain.Specifications.ILinqSpecification`1">
            <summary>
                Defines a contract for the behaviour of a LINQ Specification design pattern.
            </summary>
            <typeparam name="T">The type to be used for Input / Output.</typeparam>
        </member>
        <member name="M:SharpArch.Domain.Specifications.ILinqSpecification`1.SatisfyingElementsFrom(System.Linq.IQueryable{`0})">
            <summary>
                Returns the elements from the specified candidates that are satisfying the
                specification.
            </summary>
            <param name="candidates">The candidates.</param>
            <returns>A list of satisfying elements.</returns>
        </member>
        <member name="T:SharpArch.Domain.Specifications.ISpecification`1">
            <summary>
                Defines the behaviour of a specification which is used to select specified items from a
                collection
            </summary>
            <typeparam name="T">The type that the specification is applied to.</typeparam>
        </member>
        <member name="M:SharpArch.Domain.Specifications.ISpecification`1.And(SharpArch.Domain.Specifications.ISpecification{`0})">
            <summary>
                Allows multiple specifications to be joined together.
            </summary>
            <param name="specification">The specification to add.</param>
            <returns>A specification object containing original specification and new addition.</returns>
        </member>
        <member name="M:SharpArch.Domain.Specifications.ISpecification`1.IsSatisfiedBy(`0)">
            <summary>
                Indicates whether the item provided satisfies the specification.
            </summary>
            <param name="item">The item to evaluate.</param>
            <returns>A value indicating whether the specification has be satisfied.</returns>
        </member>
        <member name="M:SharpArch.Domain.Specifications.ISpecification`1.IsGeneralizationOf(SharpArch.Domain.Specifications.ISpecification{`0})">
            <summary>
                Checks whether the specification is more general than a given specification.
            </summary>
            <param name="specification">The specification to test.</param>
            <returns>A value indicating whether the current specification is a generalisation of the supplied specification.</returns>
        </member>
        <member name="M:SharpArch.Domain.Specifications.ISpecification`1.IsSpecialCaseOf(SharpArch.Domain.Specifications.ISpecification{`0})">
            <summary>
                Checks whether the specification is more specific than a given specification.
            </summary>
            <param name="specification">The specification to test.</param>
            <returns>A value indicating whether the current specification is a special case version of the supplied specification.</returns>
        </member>
        <member name="M:SharpArch.Domain.Specifications.ISpecification`1.Not(SharpArch.Domain.Specifications.ISpecification{`0})">
            <summary>
                Allows multiple specifications to be joined together, the specification must return <c>false</c>.
            </summary>
            <param name="specification">The specification to add.</param>
            <returns>A specification object containing original specification and new addition.</returns>
        </member>
        <member name="M:SharpArch.Domain.Specifications.ISpecification`1.Or(SharpArch.Domain.Specifications.ISpecification{`0})">
            <summary>
                Allows multiple specifications to be joined together, the specification can return <c>true</c>.
            </summary>
            <param name="specification">The specification to add.</param>
            <returns>A specification object containing original specification and new addition.</returns>
        </member>
        <member name="M:SharpArch.Domain.Specifications.ISpecification`1.RemainderUnsatisfiedBy(`0)">
            <summary>
                Returns the specification representing the criteria that are not met by the candidate object.
            </summary>
            <param name="item">The item to test.</param>
            <returns>A value indicating whether the specification is unsatisfied by the specified item.</returns>
        </member>
        <member name="T:SharpArch.Domain.Specifications.QuerySpecification`1">
            <summary>
                Serves as the base class for query specifications.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
        </member>
        <member name="P:SharpArch.Domain.Specifications.QuerySpecification`1.MatchingCriteria">
            <summary>
                Gets the matching criteria.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.Specifications.QuerySpecification`1.SatisfyingElementsFrom(System.Linq.IQueryable{`0})">
            <summary>
                Returns the elements from the specified candidates that are satisfying the
                specification.
            </summary>
            <param name="candidates">The candidates.</param>
            <returns>A list of satisfying elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="candidates"/> is <see langword="null" />.</exception>
        </member>
        <member name="T:SharpArch.Domain.Specifications.QuerySpecificationExtensions">
            <summary>
                Provides extension methods that extend the <see cref="T:SharpArch.Domain.Specifications.QuerySpecification`1"/> class.
            </summary>
        </member>
        <member name="M:SharpArch.Domain.Specifications.QuerySpecificationExtensions.And``1(SharpArch.Domain.Specifications.QuerySpecification{``0},SharpArch.Domain.Specifications.QuerySpecification{``0})">
            <summary>
                Returns a specification that joins both specified specifications together using
                the AND operator.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="specification1">The first specification.</param>
            <param name="specification2">The second specification.</param>
            <returns>A query specification.</returns>
        </member>
        <member name="M:SharpArch.Domain.Specifications.QuerySpecificationExtensions.Or``1(SharpArch.Domain.Specifications.QuerySpecification{``0},SharpArch.Domain.Specifications.QuerySpecification{``0})">
            <summary>
                Returns a specification that joins both specified specifications together using
                the OR operator.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="specification1">The first specification.</param>
            <param name="specification2">The second specification.</param>
            <returns>A query specification.</returns>
        </member>
    </members>
</doc>
