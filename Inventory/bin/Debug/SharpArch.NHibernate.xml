<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpArch.NHibernate</name>
    </assembly>
    <members>
        <member name="T:SharpArch.NHibernate.Contracts.Repositories.INHibernateRepository`1">
            <summary>
                Extends the basic data repository interface with an interface that supports a number 
                of NHibernate specific methods while avoiding a concrete dependency on the NHibernate
                assembly.  For looser coupling, the "Core" layers of the SharpArch library and of your 
                application should not have a reference to the NHibernate assembly.
            </summary>
        </member>
        <member name="T:SharpArch.NHibernate.Contracts.Repositories.INHibernateRepositoryWithTypedId`2">
            <summary>
            
            </summary>
            <typeparam name="T">Entity type/</typeparam>
            <typeparam name="TId">Entity identifier type.</typeparam>
            <seealso cref="T:SharpArch.Domain.PersistenceSupport.IRepositoryWithTypedId`2" />
        </member>
        <member name="M:SharpArch.NHibernate.Contracts.Repositories.INHibernateRepositoryWithTypedId`2.FindAll(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Looks for zero or more instances using the properties provided.
            The key of the collection should be the property name and the value should be
            the value of the property to filter by.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.Contracts.Repositories.INHibernateRepositoryWithTypedId`2.FindAll(`0,System.String[])">
            <summary>
            Looks for zero or more instances using the example provided.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.Contracts.Repositories.INHibernateRepositoryWithTypedId`2.FindOne(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Looks for a single instance using the property/values provided.
            </summary>
            <exception cref="T:NHibernate.NonUniqueResultException" />
        </member>
        <member name="M:SharpArch.NHibernate.Contracts.Repositories.INHibernateRepositoryWithTypedId`2.FindOne(`0,System.String[])">
            <summary>
            Looks for a single instance using the example provided.
            </summary>
            <exception cref="T:NHibernate.NonUniqueResultException" />
        </member>
        <member name="M:SharpArch.NHibernate.Contracts.Repositories.INHibernateRepositoryWithTypedId`2.Get(`1,SharpArch.Domain.Enums.LockMode)">
            <summary>
            Returns null if a row is not found matching the provided Id.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.Contracts.Repositories.INHibernateRepositoryWithTypedId`2.Load(`1)">
            <summary>
            Throws an exception if a row is not found matching the provided Id.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.Contracts.Repositories.INHibernateRepositoryWithTypedId`2.Load(`1,SharpArch.Domain.Enums.LockMode)">
            <summary>
            Throws an exception if a row is not found matching the provided Id.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.Contracts.Repositories.INHibernateRepositoryWithTypedId`2.Update(`0)">
            <summary>
            For entities that have assigned Id's, you should explicitly call Update to update an existing one.
            Updating also allows you to commit changes to a detached object.  More info may be found at:
            http://www.hibernate.org/hib_docs/nhibernate/html_single/#manipulatingdata-updating-detached
            </summary>
        </member>
        <member name="T:SharpArch.NHibernate.ISessionFactoryKeyProvider">
            <summary>
            Provides the key to retrieve session factory from IoC.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.ISessionFactoryKeyProvider.GetKey">
            <summary>
            Gets the session factory key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpArch.NHibernate.ISessionFactoryKeyProvider.GetKeyFrom(System.Object)">
            <summary>
            Gets the session factory key.
            </summary>
            <param name="anObject">An optional object that may have an attribute used to determine the session factory key.</param>
            <returns></returns>
        </member>
        <member name="T:SharpArch.NHibernate.NHibernateSessionFactoryBuilder">
            <summary>
                Creates NHibernate SessionFactory <see cref="T:NHibernate.ISessionFactory" />
            </summary>
            <remarks>
                Transient object, session factory must be redistered as singletone in DI Container.
            </remarks>
        </member>
        <member name="F:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.DefaultNHibernateConfigFileName">
            <summary>
            Default configuration file name.
            </summary>
        </member>
        <member name="F:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.DefaultConfigurationName">
            <summary>
            Default NHibernate session factory key.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpArch.NHibernate.NHibernateSessionFactoryBuilder"/> class.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.BuildSessionFactory">
            <summary>
            Creates the session factory.
            </summary>
            <returns> NHibernate session factory <see cref="T:NHibernate.ISessionFactory"/>.</returns>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.BuildConfiguration">
            <summary>
            Builds NHibernate configuration.
            </summary>
            <remarks>
            <para>
            Any changes made to configuration object <b>will not be persisted</b> in configuration cache.
            This can be useful to make dynamic changes to configuration or in case changes cannot be serialized (e.g. event listeners are not marked with <see cref="T:System.SerializableAttribute"/>.
            </para>
            <para>
            To make persistent changes use <seealso cref="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.ExposeConfiguration(System.Action{NHibernate.Cfg.Configuration})"/>.
            </para>
            </remarks>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.ExposeConfiguration(System.Action{NHibernate.Cfg.Configuration})">
            <summary>
            Allows to alter configuration before creating NHibernate configuration.
            </summary>
            <remarks>
            Changes to configuration will be persisted in configuration cache, if it is enabled.
            In case changes must not be persisted in cache, they must be applied after <seealso cref="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.BuildConfiguration"/>.
            </remarks>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.UseConfigurationCache(SharpArch.NHibernate.INHibernateConfigurationCache)">
            <summary>
            Allows to cache compiled NHibernate configuration.
            </summary>
            <param name="configurationCache">The configuration cache, see <see cref="T:SharpArch.NHibernate.INHibernateConfigurationCache"/>. </param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Please provide configuration cache instance.</exception>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.AddMappingAssemblies(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Allows to specify additional assemblies containing FluentNHibernate mappings.
            </summary>
            <param name="mappingAssemblies">The mapping assemblies.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Mapping assemblies are not specified.</exception>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.UseAutoPersistenceModel(FluentNHibernate.Automapping.AutoPersistenceModel)">
            <summary>
            Allows to specify FluentNhibernate auto-persistence model to use..
            </summary>
            <param name="autoPersistenceModel">The automatic persistence model.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.UseProperties(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Allows to specify additional NHibernate properties, see http://nhibernate.info/doc/nhibernate-reference/session-configuration.html.
            </summary>
            <param name="properties">The properties.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="properties"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.UseDataAnnotationValidators(System.Boolean)">
            <summary>
            Allows to use Data Annotations and <see cref="T:System.ComponentModel.DataAnnotations.Validator"/> to validate entities before insert/update.
            </summary>
            <remarks>
            See https://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations%28v=vs.110%29.aspx for details about Data Annotations.
            </remarks>
            <seealso cref="T:SharpArch.NHibernate.NHibernateValidator.DataAnnotationsEventListener"/>.
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.UseConfigFile(System.String)">
            <summary>
            Allows to specify nhibernate configuration file.
            </summary>
            <remarks>
            See http://nhibernate.info/doc/nhibernate-reference/session-configuration.html#configuration-xmlconfig for more details
            </remarks>
            <exception cref="T:System.ArgumentException">NHibernate config was not specified.</exception>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.UsePersistenceConfigurer(FluentNHibernate.Cfg.Db.IPersistenceConfigurer)">
            <summary>
            Allows to specify custom configuration using <see cref="T:FluentNHibernate.Cfg.Db.IPersistenceConfigurer"/>.
            </summary>
            <param name="persistenceConfigurer">The persistence configurer.</param>
            <example>
            <code>
            var persistenceConfigurer =
              SQLiteConfiguration.Standard.ConnectionString(c => c.Is("Data Source=:memory:;Version=3;New=True;"));
            var configuration = new NHibernateSessionFactoryBuilder()
              .UsePersistenceConfigurer(persistenceConfigurer);
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="persistenceConfigurer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateSessionFactoryBuilder.LoadExternalConfiguration">
            <summary>
                Loads configuration from properties dictionary and from external file if available.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpArch.NHibernate.NHibernateValidator.HasUniqueDomainSignatureAttributeBase">
            <summary>
            Performs validation of domain signature uniqueness.
            </summary>
            <remarks>
            Performs database search to ensure no other entity with same domain signature exists.
            </remarks>
            <seealso cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />
            <seealso cref="T:SharpArch.Domain.DomainModel.DomainSignatureAttribute"/>.
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateValidator.HasUniqueDomainSignatureAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpArch.NHibernate.NHibernateValidator.HasUniqueDomainSignatureAttributeBase"/> class.
            </summary>
        </member>
        <member name="P:SharpArch.NHibernate.NHibernateValidator.HasUniqueDomainSignatureAttributeBase.RequiresValidationContext">
            <summary>
            Gets a value that indicates whether the attribute requires validation context.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateValidator.HasUniqueDomainSignatureAttributeBase.DoValidate``1(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs database lookup to ensure domain signature uniqueness.
            </summary>
            <typeparam name="TId">The type of the identifier.</typeparam>
            <param name="value">The entity.</param>
            <param name="validationContext">The validation context.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"><see cref="T:SharpArch.Domain.PersistenceSupport.IEntityDuplicateChecker"/>can not be resolvedfrom <paramref name="validationContext"/>.</exception>
        </member>
        <member name="T:SharpArch.NHibernate.NHibernateValidator.DataAnnotationsEventListener">
            <summary>
            Performs entity validation using <see cref="T:System.ComponentModel.DataAnnotations.Validator"/> class.
            </summary>
        </member>
        <member name="T:SharpArch.NHibernate.NHibernateValidator.HasUniqueDomainSignatureAttribute">
            <summary>
                Provides a class level validator for determining if the entity has a unique domain signature
                when compared with other entries in the database.
                Due to the fact that .NET does not support generic attributes, this only works for entity
                types having an Id of type int.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateValidator.HasUniqueDomainSignatureAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Returns true if entity's domain signature is unique in database.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class.
            </returns>
        </member>
        <member name="T:SharpArch.NHibernate.NHibernateValidator.HasUniqueDomainSignatureWithStringIdAttribute">
            <summary>
            Performs validation of domain signature uniqueness.
            </summary>
            <remarks>
            Performs database search to ensure no other entity with same domain signature exists.
            </remarks>
            <seealso cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />
            <seealso cref="T:SharpArch.Domain.DomainModel.DomainSignatureAttribute"/>.
            <seealso cref="T:SharpArch.NHibernate.NHibernateValidator.HasUniqueDomainSignatureAttribute"/>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateValidator.HasUniqueDomainSignatureWithStringIdAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs validation.
            </summary>
        </member>
        <member name="T:SharpArch.NHibernate.NullNHibernateConfigurationCache">
            <summary>
            Null Object for configuration cache.
            </summary>
        </member>
        <member name="F:SharpArch.NHibernate.NullNHibernateConfigurationCache.Null">
            <summary>
            Instance.
            </summary>
        </member>
        <member name="T:SharpArch.NHibernate.TransactionManager">
            <summary>
                Transaction manager for NHibernate.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.TransactionManager.#ctor(NHibernate.ISession)">
            <summary>
                Creates instance of transaction manager.
            </summary>
            <param name="session"></param>
        </member>
        <member name="P:SharpArch.NHibernate.TransactionManager.Session">
            <summary>
                NHibernate session.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.TransactionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
                Begins the transaction.
            </summary>
            <param name="isolationLevel">Transaction isolation level, see <see cref="T:System.Data.IsolationLevel" /> for details.</param>
            <returns>The transaction instance.</returns>
        </member>
        <member name="M:SharpArch.NHibernate.TransactionManager.CommitTransaction">
            <summary>
                Commits the transaction, saving all changes.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.TransactionManager.RollbackTransaction">
            <summary>
                Rolls the transaction back, discarding any changes.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.TransactionManager.CommitChanges">
            <summary>
                This isn't specific to any one DAO and flushes everything that has been changed since the last commit.
            </summary>
        </member>
        <member name="T:SharpArch.NHibernate.EntityDuplicateChecker">
            <summary>
            Checks if entity with the same domain signature already exists in the database.
            </summary>
            <seealso cref="T:SharpArch.Domain.PersistenceSupport.IEntityDuplicateChecker" />
            <seealso cref="T:SharpArch.Domain.DomainModel.DomainSignatureAttribute"/>.
        </member>
        <member name="M:SharpArch.NHibernate.EntityDuplicateChecker.#ctor(NHibernate.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpArch.NHibernate.EntityDuplicateChecker"/> class.
            </summary>
            <param name="session">The session.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpArch.NHibernate.EntityDuplicateChecker.DoesDuplicateExistWithTypedIdOf``1(SharpArch.Domain.DomainModel.IEntityWithTypedId{``0})">
            <summary>
            Provides a behavior specific repository for checking if a duplicate exists of an existing entity.
            </summary>
            <typeparam name="TId">Entity Id type.</typeparam>
            <param name="entity">The entity.</param>
            <returns>
              <c>true</c> if a duplicate exists, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">entity is null. </exception>
        </member>
        <member name="T:SharpArch.NHibernate.FluentNHibernate.GeneratorHelper">
            <summary>
                An optional helper class used to view the mapping file generated from a fluent nhibernate class mapper
            </summary>
            <remarks>
                This is not necessary for Fluent Nhibernate to function properly.
            </remarks>
        </member>
        <member name="T:SharpArch.NHibernate.FluentNHibernate.IAutoPersistenceModelGenerator">
            <summary>
            Fluent NHibernate auto-mapping model generator.
            </summary>
            <remarks>
            Interface implementors will be automatically executed by TestDatabaseInitializer during test database initialization.
            </remarks>
        </member>
        <member name="M:SharpArch.NHibernate.FluentNHibernate.IAutoPersistenceModelGenerator.Generate">
            <summary>
            Generates persistence model.
            </summary>
        </member>
        <member name="T:SharpArch.NHibernate.FluentNHibernate.IMapGenerator">
            <summary>
                Facilitates the visitor pattern for <see cref = "T:SharpArch.NHibernate.FluentNHibernate.GeneratorHelper" /> to spit out the NHibernate
                XML for the class.
            
                To use, have your mapper implement this interface.  Then, simply include the following line within
                Generate():  return CreateMapping(new MappingVisitor());
            
                Now you can call Generate on your mapper class to view the generated XML.
            </summary>
            <remarks>
                This is not necessary for Fluent Nhibernate to function properly.
            </remarks>
        </member>
        <member name="P:SharpArch.NHibernate.FluentNHibernate.IMapGenerator.FileName">
            <summary>
            File name.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.FluentNHibernate.IMapGenerator.Generate">
            <summary>
            Generates XML mapping document.
            </summary>
        </member>
        <member name="T:SharpArch.NHibernate.INHibernateConfigurationCache">
            <summary>
                Interface for providing caching capability for an <see cref = "T:NHibernate.Cfg.Configuration" /> object.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.INHibernateConfigurationCache.LoadConfiguration(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Load the <see cref = "T:NHibernate.Cfg.Configuration" /> object from a cache.
            </summary>
            <param name = "configKey">Key value to provide a unique name to the cached <see cref = "T:NHibernate.Cfg.Configuration" />.</param>
            <param name = "configPath">NHibernate configuration xml file.  This is used to determine if the 
                cached <see cref = "T:NHibernate.Cfg.Configuration" /> is out of date or not.</param>
            <param name="mappingAssemblies">List of assemblies containing HBM files.</param>
            <returns>If an up to date cached object is available, a <see cref = "T:NHibernate.Cfg.Configuration" /> object, otherwise null.</returns>
        </member>
        <member name="M:SharpArch.NHibernate.INHibernateConfigurationCache.SaveConfiguration(System.String,NHibernate.Cfg.Configuration)">
            <summary>
                Save the <see cref = "T:NHibernate.Cfg.Configuration" /> object to a cache.
            </summary>
            <param name = "configKey">Key value to provide a unique name to the cached <see cref = "T:NHibernate.Cfg.Configuration" />.</param>
            <param name = "config">Configuration object to save.</param>
        </member>
        <member name="T:SharpArch.NHibernate.LinqRepository`1">
            <summary>
            LINQ extensions to NHibernate repository.    
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Int32" />
            <seealso cref="T:SharpArch.Domain.PersistenceSupport.ILinqRepository`1" />
        </member>
        <member name="M:SharpArch.NHibernate.LinqRepository`1.#ctor(SharpArch.Domain.PersistenceSupport.ITransactionManager,NHibernate.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpArch.NHibernate.LinqRepository`1"/> class.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="session">The session.</param>
        </member>
        <member name="T:SharpArch.NHibernate.LinqRepositoryWithTypedId`2">
            <summary>
            LINQ extensions to NHibernate repository.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <typeparam name="TId">The type of the identifier.</typeparam>
            <seealso cref="T:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2" />
            <seealso cref="T:SharpArch.Domain.PersistenceSupport.ILinqRepositoryWithTypedId`2" />
        </member>
        <member name="M:SharpArch.NHibernate.LinqRepositoryWithTypedId`2.#ctor(SharpArch.Domain.PersistenceSupport.ITransactionManager,NHibernate.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpArch.NHibernate.LinqRepositoryWithTypedId`2"/> class.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:SharpArch.NHibernate.LinqRepositoryWithTypedId`2.FindAll">
            <summary>
            Finds all items within the repository.
            </summary>
            <returns>
            All items in the repository.
            </returns>
        </member>
        <member name="M:SharpArch.NHibernate.LinqRepositoryWithTypedId`2.FindAll(SharpArch.Domain.Specifications.ILinqSpecification{`0})">
            <summary>
            Finds all items by a specification.
            </summary>
            <param name="specification">The specification.</param>
            <returns>
            All matching items.
            </returns>
        </member>
        <member name="M:SharpArch.NHibernate.LinqRepositoryWithTypedId`2.FindOne(`1)">
            <summary>
            Finds an item by Id.
            </summary>
            <param name="id">The Id of the entity.</param>
            <returns>
            The matching item.
            </returns>
        </member>
        <member name="M:SharpArch.NHibernate.LinqRepositoryWithTypedId`2.FindOne(SharpArch.Domain.Specifications.ILinqSpecification{`0})">
            <summary>
            Finds an item by a specification.
            </summary>
            <param name="specification">The specification.</param>
            <returns>
            The matching item or <c>null</c>.
            </returns>
        </member>
        <member name="T:SharpArch.NHibernate.NHibernateConfigurationFileCache">
            <summary>
            File cache implementation of INHibernateConfigurationCache.  Saves and loads a
            seralized version of <see cref="T:NHibernate.Cfg.Configuration"/> to a temporary file location.
            </summary>
            <remarks>Seralizing a <see cref="T:NHibernate.Cfg.Configuration"/> object requires that all components
            that make up the Configuration object be Serializable.  This includes any custom NHibernate 
            user types implementing <see cref="!:NHibernate.UserTypes.IUserType"/>.</remarks>
        </member>
        <member name="F:SharpArch.NHibernate.NHibernateConfigurationFileCache.dependentFilePaths">
            <summary>
            List of files that the cached configuration is dependent on.  If any of these
            files are newer than the cache file then the cache file could be out of date.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateConfigurationFileCache.#ctor">
            <summary>
            Initializes new instance of the NHibernateConfigurationFileCache
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateConfigurationFileCache.#ctor(System.String[])">
            <summary>
            Initializes new instance of the NHibernateConfigurationFileCache using the 
            given dependentFilePaths parameter.
            </summary>
            <param name="dependentFilePaths">LIst of files that the cached configuration
            is dependent upon.</param>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateConfigurationFileCache.LoadConfiguration(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load the <see cref="T:NHibernate.Cfg.Configuration"/> object from a cache.
            </summary>
            <param name="configKey">Key value to provide a unique name to the cached <see cref="T:NHibernate.Cfg.Configuration"/>.</param>
            <param name="configPath">NHibernate configuration xml file.  This is used to determine if the 
            cached <see cref="T:NHibernate.Cfg.Configuration"/> is out of date or not.</param>
            <param name="mappingAssemblies">Assemblies containing NHibernate mappings.</param>
            <returns>If an up to date cached object is available, a <see cref="T:NHibernate.Cfg.Configuration"/> 
            object, otherwise null.</returns>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateConfigurationFileCache.SaveConfiguration(System.String,NHibernate.Cfg.Configuration)">
            <summary>
            Save the <see cref="T:NHibernate.Cfg.Configuration"/> object to cache to a temporary file.
            </summary>
            <param name="configKey">Key value to provide a unique name to the cached <see cref="T:NHibernate.Cfg.Configuration"/>.</param>
            <param name="config">Configuration object to save.</param>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateConfigurationFileCache.IsCachedConfigCurrent(System.String)">
            <summary>
            Tests if an existing cached configuration file is out of date or not.
            </summary>
            <param name="cachePath">Location of the cached</param>
            <returns>False if the cached config file is out of date, otherwise true.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the cachePath or configPath 
            parameters are null.</exception>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateConfigurationFileCache.GetMaxDependencyTime">
            <summary>
            Returns the latest file write time from the list of dependent file paths.
            </summary>
            <returns>Latest file write time, or '1/1/1980' if list is empty.</returns>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateConfigurationFileCache.CachedConfigPath(System.String)">
            <summary>
            Provide a unique temporary file path/name for the cache file.
            </summary>
            <param name="configKey"></param>
            <returns>Full file path.</returns>
            <remarks>The hash value is intended to avoid the file from conflicting
            with other applications also using this cache feature.</remarks>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateConfigurationFileCache.AppendToDependentFilePaths(System.String)">
            <summary>
            Append the given file path to the dependentFilePaths list.
            </summary>
            <param name="path">File path.</param>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateConfigurationFileCache.AppendToDependentFilePaths(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Append the given list of file paths to the dependentFilePaths list.
            </summary>
            <param name="paths"><see cref="T:System.Collections.Generic.IEnumerable`1"/> list of file paths.</param>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateConfigurationFileCache.FindFile(System.String)">
            <summary>
            Tests if the file or assembly name exists either in the application's bin folder
            or elsewhere.
            </summary>
            <param name="path">Path or file name to test for existance.</param>
            <returns>Full path of the file.</returns>
            <remarks>If the path parameter does not end with ".dll" it is appended and 
            tested if the dll file exists.</remarks>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file is not found.</exception>
        </member>
        <member name="T:SharpArch.NHibernate.NHibernateRepository`1">
            <summary>
                Since nearly all of the domain objects you create will have a type of int Id, this 
                most frequently used base NHibernateRepository leverages this assumption.  If you want 
                an entity with a type other than int, such as string, then use 
                <see cref = "T:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2" />.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepository`1.#ctor(SharpArch.Domain.PersistenceSupport.ITransactionManager,NHibernate.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpArch.NHibernate.NHibernateRepository`1"/> class.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="session">The session.</param>
        </member>
        <member name="T:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2">
            <summary>
                Provides a fully loaded DAO which may be created in a few ways including:
                * Direct instantiation; e.g., new GenericDao&lt;Customer, string&gt;
                * Spring configuration; e.g., <object id = "CustomerDao" type = "SharpArch.Data.NHibernateSupport.GenericDao&lt;CustomerAlias, string>, SharpArch.Data" autowire = "byName" />
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.#ctor(SharpArch.Domain.PersistenceSupport.ITransactionManager,NHibernate.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2"/> class.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="session">The session.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.TransactionManager">
            <summary>
            Returns the database context, which provides a handle to application wide DB
            activities such as committing any pending changes, beginning a transaction,
            rolling back a transaction, etc.
            </summary>
        </member>
        <member name="P:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.Session">
            <summary>
            Gets the session.
            </summary>
            <value>
            The session.
            </value>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.Evict(`0)">
            <summary>
            Dissasociates the entity with the ORM so that changes made to it are not automatically
            saved to the database.
            </summary>
            <param name="entity"></param>
            <remarks>
            In NHibernate this removes the entity from current session cache.
            More details may be found at http://www.hibernate.org/hib_docs/nhibernate/html_single/#performance-sessioncache.
            </remarks>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.FindAll(`0,System.String[])">
            <summary>
            Looks for zero or more instances using the example provided.
            </summary>
            <param name="exampleInstance"></param>
            <param name="propertiesToExclude"></param>
            <returns></returns>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.FindAll(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Looks for zero or more instances using the properties provided.
            The key of the collection should be the property name and the value should be
            the value of the property to filter by.
            </summary>
            <param name="propertyValuePairs"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">No properties specified. Please specify at least one property/value pair.</exception>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.FindOne(`0,System.String[])">
            <summary>
            Looks for a single instance using the example provided.
            </summary>
            <param name="exampleInstance"></param>
            <param name="propertiesToExclude"></param>
            <returns></returns>
            <exception cref="T:NHibernate.NonUniqueResultException"></exception>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.FindOne(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Looks for a single instance using the property/values provided.
            </summary>
            <param name="propertyValuePairs"></param>
            <returns></returns>
            <exception cref="T:NHibernate.NonUniqueResultException"></exception>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.Get(`1,SharpArch.Domain.Enums.LockMode)">
            <summary>
            Returns null if a row is not found matching the provided Id.
            </summary>
            <param name="id"></param>
            <param name="lockMode"></param>
            <returns></returns>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.Load(`1)">
            <summary>
            Throws an exception if a row is not found matching the provided Id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.Load(`1,SharpArch.Domain.Enums.LockMode)">
            <summary>
            Throws an exception if a row is not found matching the provided Id.
            </summary>
            <param name="id"></param>
            <param name="lockMode"></param>
            <returns></returns>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.Save(`0)">
            <summary>
            For entities that have assigned Id's, you must explicitly call Save to add a new one.
            See http://www.hibernate.org/hib_docs/nhibernate/html_single/#mapping-declaration-id-assigned.
            </summary>
            <param name="entity"></param>
            <returns>Saved entity instance.</returns>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.Update(`0)">
            <summary>
            For entities that have assigned Id's, you should explicitly call Update to update an existing one.
            Updating also allows you to commit changes to a detached object.  More info may be found at:
            http://www.hibernate.org/hib_docs/nhibernate/html_single/#manipulatingdata-updating-detached
            </summary>
            <param name="entity"></param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.Delete(`0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.Delete(`1)">
            <summary>
            Deletes the entity that matches the provided ID.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.Get(`1)">
            <summary>
            Returns the entity that matches the specified ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            An entity or <c>null</c> if a row is not found matching the provided ID.
            </remarks>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.GetAll">
            <summary>
            Returns all of the items of a given type.
            </summary>
            <returns>
            All entities from database.
            </returns>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.SaveOrUpdate(`0)">
            <summary>
                Although SaveOrUpdate _can_ be invoked to update an object with an assigned Id, you are 
                hereby forced instead to use Save/Update for better clarity.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateRepositoryWithTypedId`2.ConvertFrom(SharpArch.Domain.Enums.LockMode)">
            <summary>
                Translates a domain layer lock mode into an NHibernate lock mode via reflection.  This is 
                provided to facilitate developing the domain layer without a direct dependency on the 
                NHibernate assembly.
            </summary>
        </member>
        <member name="T:SharpArch.NHibernate.NHibernateQuery">
            <summary>
            Base class for NHibernate query objects.
            </summary>
        </member>
        <member name="M:SharpArch.NHibernate.NHibernateQuery.#ctor(NHibernate.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpArch.NHibernate.NHibernateQuery"/> class.
            </summary>
            <param name="session">The session.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is <c>null</c>.</exception>
        </member>
        <member name="P:SharpArch.NHibernate.NHibernateQuery.Session">
            <summary>
            NHibernate <see cref="T:NHibernate.ISession"/>.
            </summary>
        </member>
    </members>
</doc>
